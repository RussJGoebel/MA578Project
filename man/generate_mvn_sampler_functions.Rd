% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/coupling_functions.R
\name{generate_mvn_sampler_functions}
\alias{generate_mvn_sampler_functions}
\title{Helper functions for maximal sampling}
\usage{
generate_mvn_sampler_functions(
  mu = c(0, 0),
  sigma = diag(length(mu)),
  R = t(chol(sigma)),
  log_scaling = 0
)
}
\arguments{
\item{mu}{Mean of distribution.}

\item{sigma}{Covariance matrix \eqn{\Sigma} to sample from}

\item{R}{Cholesky factor of \eqn{\Sigma}}

\item{log_scaling}{Paramater \eqn{\sigma} in \eqn{e^{2\sigma}\Sigma}}
}
\value{

}
\description{
Maximal sampling requires evaluating densities and sampling from distributions.
Given a multivariate normal distribution, these helper functions generate functions
to achieve this.
}
\examples{

m1 <- 10
sigma1 <- diag(1)
log_scaling1 <- 1

m2 <- -10
sigma2 <- diag(1)
log_scaling2 <- 1

h1 <- generate_mvn_sampler_functions(mu = m1,sigma  =sigma1, log_scaling = log_scaling1)
h2 <- generate_mvn_sampler_functions(mu = m2,sigma  =sigma2, log_scaling = log_scaling2)

niter <- 10000
rmat <- matrix(nrow = niter,ncol = 2)

for(i in 1:niter){

r <- sample_maximal_coupling(h1$msample,h2$msample,h1$log_density,h2$log_density)
rmat[i,1] <- r$x
rmat[i,2] <- r$y

}

hist(c(rmat[,1],rmat[,2]))

}
